// Based on tutorials from http://www.rastertek.com
// For core module AG1102A - Game Programming for PC and Xbox, DirectX Game, University of Abertay, Dundee.
// By Richa Sachdeva, 1304869, M.Sc. Computer Games Technology
////////////////////////////////////////////////////////////////////////////////
// Filename: color.ps
////////////////////////////////////////////////////////////////////////////////
// Code snippet has been taken from 
// http://stackoverflow.com/questions/15628039/simplex-noise-shader
// and adapted to suit the current requirement

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float4 color : COLOR;
};



// hash based 3d value noise
float hash( float n )
{
    return frac(sin(n)*43758.5453);
}

float noise( float3 x )
{
    // The noise function returns a value in the range -1.0f -> 1.0f

    float3 p = floor(x);
    float3 f = frac(x);

    f       = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0 + 113.0*p.z;

    return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
                   lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
               lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
                   lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
}


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ColorPixelShader(PixelInputType input) : SV_TARGET
{
  float r, g, b, r1, g1, b1;
  float rand;

  r = 0; g= 0; b = 0; r1 = 0; g1 = 0; b1 = 0;

	if(input.position.x%6 < 1){
		r = noise(float3(input.position.x/4, input.position.y/4, input.position.z/4));
		g = 0.0;
		b = noise(float3(input.position.x/8, input.position.y/8, input.position.z/8));
	}
	else{
		r1 = 0.0;
		g1 = 0.0;
		b1 = noise(float3(input.position.x/2, input.position.y/2, input.position.z/2));
	}

	rand = noise(float3(input.position.x, input.position.y, input.position.z));
	input.color = lerp(float4(r,g, b, 1), float4(r1, g1, b1, 1), 0.5);
    return input.color;
}
